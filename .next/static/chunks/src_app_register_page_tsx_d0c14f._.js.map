{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/ahmet/Desktop/babonbo-frontend-assignment/src/app/register/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\n\n// Validation Schema for registration\nconst validationSchema = Yup.object({\n  email: Yup.string().email(\"Invalid email\").required(\"Email is required\"),\n  password: Yup.string()\n    .min(6, \"Minimum 6 characters\")\n    .required(\"Password is required\"),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref(\"password\"), \"\"], \"Passwords must match\")\n    .required(\"Confirm password is required\"),\n});\n\nexport default function Register() {\n  const [error, setError] = useState<string | null>(null);\n  const [showPopup, setShowPopup] = useState(false);\n  const router = useRouter();\n\n  const handleSubmit = async (values: { email: string; password: string }) => {\n    // Check if user already exists in localStorage\n    const existingEmail = localStorage.getItem(\"email\");\n\n    if (existingEmail && existingEmail === values.email) {\n      setError(\"An account with this email already exists. Please log in.\");\n      setShowPopup(true);\n      setTimeout(() => {\n        router.push(\"/login\"); // Redirect to login page after showing the error\n      }, 2000);\n      return;\n    }\n\n    // Fake backend registration\n    const fakeToken = `fake-jwt-token-${Date.now()}`; // Create a fake token\n    localStorage.setItem(\"token\", fakeToken); // Save token to localStorage\n    localStorage.setItem(\"email\", values.email); // Save email for reference\n    localStorage.setItem(\"password\", values.password); // Save email for reference\n\n    // Show success message and redirect after a short delay\n    setError(\"Account created successfully! Redirecting...\");\n    setShowPopup(true); // Show success popup\n    setTimeout(() => {\n      router.push(\"/\"); // Redirect to the homepage\n    }, 2000);\n  };\n\n  return (\n    <div className=\"flex justify-center items-center h-screen\">\n      <div className=\"card w-full max-w-md shadow-xl bg-base-100\">\n        <div className=\"card-body\">\n          <h2 className=\"card-title\">Register</h2>\n          <Formik\n            initialValues={{ email: \"\", password: \"\", confirmPassword: \"\" }}\n            validationSchema={validationSchema}\n            onSubmit={handleSubmit}\n          >\n            {({ isSubmitting }) => (\n              <Form>\n                <div className=\"form-control\">\n                  <label className=\"label\">\n                    <span className=\"label-text\">Email</span>\n                  </label>\n                  <Field\n                    type=\"email\"\n                    name=\"email\"\n                    className=\"input input-bordered\"\n                    placeholder=\"user1@example.com\"\n                  />\n                  <ErrorMessage\n                    name=\"email\"\n                    component=\"div\"\n                    className=\"text-red-500 text-sm\"\n                  />\n                </div>\n\n                <div className=\"form-control mt-4\">\n                  <label className=\"label\">\n                    <span className=\"label-text\">Password</span>\n                  </label>\n                  <Field\n                    type=\"password\"\n                    name=\"password\"\n                    className=\"input input-bordered\"\n                    placeholder=\"***********\"\n                  />\n                  <ErrorMessage\n                    name=\"password\"\n                    component=\"div\"\n                    className=\"text-red-500 text-sm\"\n                  />\n                </div>\n\n                <div className=\"form-control mt-4\">\n                  <label className=\"label\">\n                    <span className=\"label-text\">Confirm Password</span>\n                  </label>\n                  <Field\n                    type=\"password\"\n                    name=\"confirmPassword\"\n                    className=\"input input-bordered\"\n                    placeholder=\"***********\"\n                  />\n                  <ErrorMessage\n                    name=\"confirmPassword\"\n                    component=\"div\"\n                    className=\"text-red-500 text-sm\"\n                  />\n                </div>\n\n                <div className=\"form-control mt-6\">\n                  <button\n                    type=\"submit\"\n                    className=\"btn btn-primary\"\n                    disabled={isSubmitting}\n                  >\n                    Register\n                  </button>\n                </div>\n\n                <div className=\"mt-4\">\n                  <p>\n                    Already have an account?{\" \"}\n                    <a href=\"/login\" className=\"link link-primary\">\n                      Login here\n                    </a>\n                  </p>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n\n      {/* Success or Error Popup */}\n      {showPopup && (\n        <div className=\"modal modal-open\">\n          <div className=\"modal-box\">\n            <h3 className=\"font-bold text-lg\">Notice</h3>\n            <p>{error}</p>\n            <div className=\"modal-action\">\n              <button className=\"btn\" onClick={() => setShowPopup(false)}>\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 344, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}