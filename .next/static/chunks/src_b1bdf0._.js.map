{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/ahmet/Desktop/babonbo-frontend-assignment/src/data/users.ts"],"sourcesContent":["// data/users.ts\nexport type User = {\n  id: number;\n  email: string;\n  password: string;\n};\n\nlet users: User[] = [\n  { id: 1, email: \"user1@example.com\", password: \"password123\" },\n  { id: 2, email: \"user2@example.com\", password: \"password456\" },\n];\n\nexport const getUsers = () => users;\n\nexport const addUser = (user: User) => {\n  users.push(user);\n};\n\nexport const findUserByEmail = (email: string) =>\n  users.find((user) => user.email === email);\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;;;AAOhB,IAAI,QAAgB;IAClB;QAAE,IAAI;QAAG,OAAO;QAAqB,UAAU;IAAc;IAC7D;QAAE,IAAI;QAAG,OAAO;QAAqB,UAAU;IAAc;CAC9D;AAEM,MAAM,WAAW,IAAM;AAEvB,MAAM,UAAU,CAAC;IACtB,MAAM,IAAI,CAAC;AACb;AAEO,MAAM,kBAAkB,CAAC,QAC9B,MAAM,IAAI,CAAC,CAAC,OAAS,KAAK,KAAK,KAAK"}},
    {"offset": {"line": 33, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///Users/ahmet/Desktop/babonbo-frontend-assignment/src/app/login/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { findUserByEmail } from \"@/data/users\"; // Assuming this path is correct\n\nconst validationSchema = Yup.object({\n  email: Yup.string().email(\"Invalid email\").required(\"Email is required\"),\n  password: Yup.string()\n    .min(6, \"Minimum 6 characters\")\n    .required(\"Password is required\"),\n});\n\nexport default function Login() {\n  const [error, setError] = useState<string | null>(null);\n  const [showPopup, setShowPopup] = useState(false);\n  const router = useRouter();\n\n  const handleSubmit = async (values: { email: string; password: string }) => {\n    let user = findUserByEmail(values.email);\n\n    // If user is not found in in-memory users, check localStorage\n    if (!user) {\n      const email = localStorage.getItem(\"email\");\n      const password = localStorage.getItem(\"password\");\n\n      if (email === values.email && password === values.password) {\n        user = {\n          id: Date.now(),\n          email: values.email,\n          password: values.password,\n        }; // Simulate user creation\n      }\n    }\n\n    if (user && user.password === values.password) {\n      // Simulate token creation and store in localStorage\n      localStorage.setItem(\"token\", `fake-jwt-token-${Date.now()}`);\n      router.push(\"/\");\n    } else {\n      setError(\"Invalid email or password\");\n      setShowPopup(true); // Show popup on error\n    }\n  };\n\n  return (\n    <div className=\"flex justify-center items-center h-screen\">\n      <div className=\"card w-full max-w-md shadow-xl bg-base-100\">\n        <div className=\"card-body\">\n          <h2 className=\"card-title\">Login</h2>\n          <Formik\n            initialValues={{ email: \"\", password: \"\" }}\n            validationSchema={validationSchema}\n            onSubmit={handleSubmit}\n          >\n            {({ isSubmitting }) => (\n              <Form>\n                <div className=\"form-control\">\n                  <label className=\"label\">\n                    <span className=\"label-text\">Email</span>\n                  </label>\n                  <Field\n                    type=\"email\"\n                    name=\"email\"\n                    className=\"input input-bordered\"\n                    placeholder=\"user1@example.com\"\n                  />\n                  <ErrorMessage\n                    name=\"email\"\n                    component=\"div\"\n                    className=\"text-red-500 text-sm\"\n                  />\n                </div>\n\n                <div className=\"form-control mt-4\">\n                  <label className=\"label\">\n                    <span className=\"label-text\">Password</span>\n                  </label>\n                  <Field\n                    type=\"password\"\n                    name=\"password\"\n                    className=\"input input-bordered\"\n                    placeholder=\"***********\"\n                  />\n                  <ErrorMessage\n                    name=\"password\"\n                    component=\"div\"\n                    className=\"text-red-500 text-sm\"\n                  />\n                </div>\n\n                <div className=\"form-control mt-6\">\n                  <button\n                    type=\"submit\"\n                    className=\"btn btn-primary\"\n                    disabled={isSubmitting}\n                  >\n                    Login\n                  </button>\n                </div>\n\n                <div className=\"mt-4\">\n                  <p>\n                    Don't have an account?{\" \"}\n                    <a href=\"/register\" className=\"link link-primary\">\n                      Register here\n                    </a>\n                  </p>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n\n      {/* Error Popup */}\n      {showPopup && (\n        <div className=\"modal modal-open\">\n          <div className=\"modal-box\">\n            <h3 className=\"font-bold text-lg\">Error</h3>\n            <p>{error}</p>\n            <div className=\"modal-action\">\n              <button className=\"btn\" onClick={() => setShowPopup(false)}>\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA,6MAAgD,gCAAgC;AAJhF;;;AAFA;;;;;;AAQA,MAAM,mBAAmB,uIAAI,MAAM,CAAC;IAClC,OAAO,uIAAI,MAAM,GAAG,KAAK,CAAC,iBAAiB,QAAQ,CAAC;IACpD,UAAU,uIAAI,MAAM,GACjB,GAAG,CAAC,GAAG,wBACP,QAAQ,CAAC;AACd;AAEe,SAAS;;IACtB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IAEvB,MAAM,eAAe,OAAO;QAC1B,IAAI,OAAO,CAAA,GAAA,uHAAA,CAAA,kBAAe,AAAD,EAAE,OAAO,KAAK;QAEvC,8DAA8D;QAC9D,IAAI,CAAC,MAAM;YACT,MAAM,QAAQ,aAAa,OAAO,CAAC;YACnC,MAAM,WAAW,aAAa,OAAO,CAAC;YAEtC,IAAI,UAAU,OAAO,KAAK,IAAI,aAAa,OAAO,QAAQ,EAAE;gBAC1D,OAAO;oBACL,IAAI,KAAK,GAAG;oBACZ,OAAO,OAAO,KAAK;oBACnB,UAAU,OAAO,QAAQ;gBAC3B,GAAG,yBAAyB;YAC9B;QACF;QAEA,IAAI,QAAQ,KAAK,QAAQ,KAAK,OAAO,QAAQ,EAAE;YAC7C,oDAAoD;YACpD,aAAa,OAAO,CAAC,SAAS,CAAC,eAAe,EAAE,KAAK,GAAG,IAAI;YAC5D,OAAO,IAAI,CAAC;QACd,OAAO;YACL,SAAS;YACT,aAAa,OAAO,sBAAsB;QAC5C;IACF;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAG,WAAU;sCAAa;;;;;;sCAC3B,6LAAC,kJAAA,CAAA,SAAM;4BACL,eAAe;gCAAE,OAAO;gCAAI,UAAU;4BAAG;4BACzC,kBAAkB;4BAClB,UAAU;sCAET,CAAC,EAAE,YAAY,EAAE,iBAChB,6LAAC,kJAAA,CAAA,OAAI;;sDACH,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAM,WAAU;8DACf,cAAA,6LAAC;wDAAK,WAAU;kEAAa;;;;;;;;;;;8DAE/B,6LAAC,kJAAA,CAAA,QAAK;oDACJ,MAAK;oDACL,MAAK;oDACL,WAAU;oDACV,aAAY;;;;;;8DAEd,6LAAC,kJAAA,CAAA,eAAY;oDACX,MAAK;oDACL,WAAU;oDACV,WAAU;;;;;;;;;;;;sDAId,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAM,WAAU;8DACf,cAAA,6LAAC;wDAAK,WAAU;kEAAa;;;;;;;;;;;8DAE/B,6LAAC,kJAAA,CAAA,QAAK;oDACJ,MAAK;oDACL,MAAK;oDACL,WAAU;oDACV,aAAY;;;;;;8DAEd,6LAAC,kJAAA,CAAA,eAAY;oDACX,MAAK;oDACL,WAAU;oDACV,WAAU;;;;;;;;;;;;sDAId,6LAAC;4CAAI,WAAU;sDACb,cAAA,6LAAC;gDACC,MAAK;gDACL,WAAU;gDACV,UAAU;0DACX;;;;;;;;;;;sDAKH,6LAAC;4CAAI,WAAU;sDACb,cAAA,6LAAC;;oDAAE;oDACsB;kEACvB,6LAAC;wDAAE,MAAK;wDAAY,WAAU;kEAAoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAY/D,2BACC,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAG,WAAU;sCAAoB;;;;;;sCAClC,6LAAC;sCAAG;;;;;;sCACJ,6LAAC;4BAAI,WAAU;sCACb,cAAA,6LAAC;gCAAO,WAAU;gCAAM,SAAS,IAAM,aAAa;0CAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAS1E;GAtHwB;;QAGP,qIAAA,CAAA,YAAS;;;KAHF"}},
    {"offset": {"line": 329, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}